

(load "../util/util.lisp")
(use-package :util)

(defun double (x) (* x 2))

(print-code 
  (double 1)
  #'double
  (eq #'double (car (list #'double)))
  (lambda (x) (* x 2))
  #'(lambda (x) (* x 2))
  (double 3)
  ((lambda (x) (* x 2)) 3)
  (setq double 2)
  (double double)
  (symbol-value 'double)
  (symbol-function 'double)
  (setq x #'append)
  (eq (symbol-value 'x) (symbol-function 'append))
  (defun double (x) (* x 2))
  (setf (symbol-function 'double)
        #'(lambda (x) (* x 2)))
  (+ 1 2)
  (apply #'+ '(1 2))
  (apply (symbol-function '+) '(1 2))
  (apply #'(lambda (x y) (+ x y)) '(1 2))
  (apply #'+ 1 '(2))
  (funcall #'+ 1 2)
  (mapcar #'(lambda (x) (+ x 10)) '(1 2 3))
  (mapcar #'+ '(1 2 3) '(10 100 1000))
  (sort '(1 4 2 5 6 7 3) #'<)
  (remove-if #'evenp '(1 2 3 4 5 6 7))
  (defun our-remove-if (fn lst &optional acc)
    (if (null lst)
      acc
      (if (funcall fn (car lst))
        (our-remove-if fn (cdr lst) acc)
        (our-remove-if fn (cdr lst) (append acc (list (car lst)))))))
  (our-remove-if #'evenp '(1 2 3 4 5 6 7))
  (defun behave (animal)
    (case animal
      (dog (print 'wag-tail)
           (print 'bark))
      (rat (print 'scurry)
           (print 'squeak))
      (cat (print 'rub-legs)
           (print 'scratch-carpet))))
  (behave 'dog)
  (behave 'rat)
  (behave 'cat)
  (defun behave (animal)
    (funcall (get animal 'behavior)))
  (setf (get 'dog 'behavior)
        #'(lambda ()
            (print 'wag-tail)
            (print 'bark)))
  (behave 'dog)
  (let ((y 7))
    (defun scope-test (x)
      (list x y)))
  (scope-test 1 )
  (let ((y 5))
    (scope-test 3))
  (defun list+ (lst n)
    (mapcar #'(lambda (x) (+ x n))
            lst))
  (list+ '(1 2 3) 10)
  (let ((counter 0))
    (defun new-id () (incf counter))
    (defun reset-id () (setq counter 0)))
  (new-id)
  (new-id)
  (new-id)
  (new-id)
  (reset-id)
  (new-id)
  (new-id)
  (new-id)
  (defun make-adder (n)
    #'(lambda (x) (+ x n)))
  (setf add2 (make-adder 2)
        add10 (make-adder 10))
  (funcall add2 5)
  (funcall add10 3)
  (defun make-adderb (n)
    #'(lambda (x &optional change)
        (if change
          (setf n x)
          (+ x n))))
  (setf addx (make-adderb 3))
  (funcall addx 5)
  (funcall addx 30 t)
  (funcall addx 5)
  (defun make-dbms (db) 
    (list
      #'(lambda (key)
          (cdr (assoc key db)))
      #'(lambda (key val)
          (push (cons key val) db)
          key)
      #'(lambda (key)
          (setf db (delete key db :key #'car))
          key)))
  (setf cities (make-dbms '((boston . us ) (paris . france))))
  (funcall (car cities) 'boston)
  (funcall (second cities) 'london 'england)
  (funcall (car cities) 'london)
  (defun lookup (key db)
    (funcall (car db) key))
  (lookup 'boston cities)
  (lookup 'london cities)
  (lookup 'paris cities)
  (mapcar #'(lambda (x) (+ 2 x)) '(2 5 7 3))
  (mapcar #'copy-tree '((a b) '(c d e)))
  (defun list+ (lst n)
    (mapcar #'(lambda (x) (+ x n)) lst))
  (labels ((inc (x) (1+ x)))
    (inc 3))
  (let* ((x 10) (y x))
    y)
  (defun count-instances (obj lsts)
    (labels ((instances-in (lst)
                           (if (consp lst)
                             (+ (if (eq (car lst) obj) 1 0)
                                (instances-in (cdr lst)))
                             0)))
      (mapcar #'instances-in lsts)))
  (count-instances 'a '((a b c) (d a r p a) (d a r) (a a)))
  (defun our-length (lst)
    (if (null lst)
      0
      (1+ (our-length (cdr lst)))))
  (our-length '(1 2 3 4 5))
  (defun our-find-if (fn lst)
    (if (funcall fn (car lst))
      (car lst)
      (our-find-if fn (cdr lst))))
  (our-find-if #'oddp '(1 2 3 4 5))
  (our-find-if #'(lambda (x) (= 5 x)) '(1 2 3 4 5))
  (defun our-length (lst)
    (labels ((rec (lst acc)
                  (if (null lst)
                    acc
                    (rec (cdr lst) (1+ acc)))))
      (rec lst 0)))
  (our-length '(1 2 3 4 5))
  (defun triangle (n)
    (labels ((tri (c n)
                  (declare (type fixnum n c))
                  (if (zerop n)
                    c
                    (tri (the fixnum (+ n c))
                         (the fixnum (- n 1))))))
      (tri 0 n)))
  (defun triangle-2 (n)
    (/ (* n (+ n 1)) 2))
  (triangle 10)
  (triangle 100)
  ;(triangle 1000)
  (triangle-2 10)
  (triangle-2 100)
  (triangle-2 1000)
  (defun foo (x) (1+ x))
  (compiled-function-p #'foo)
  (compile 'foo)
  (compiled-function-p #'foo)
  (compile nil '(lambda (x) (+ x 2)))
  (progn (compile 'bar '(lambda (x) (* x 3)))
         (compiled-function-p #'bar))
  (compile 'make-adder)
  (compiled-function-p (make-adder 2))
    )


           


